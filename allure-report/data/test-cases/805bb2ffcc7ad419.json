{
  "uid" : "805bb2ffcc7ad419",
  "name" : "User Email",
  "fullName" : "testCases.Web_Basic_Sanity_Pilot.Test_Websanity#test_040",
  "historyId" : "05c6b6c49da609711dfe83e9b521f0bc",
  "time" : {
    "start" : 1672227633821,
    "stop" : 1672227634342,
    "duration" : 521
  },
  "description" : " To verify the email, in user profile page. ",
  "descriptionHtml" : "<p>To verify the email, in user profile page.</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert False",
  "statusTrace" : "self = <testCases.Web_Basic_Sanity_Pilot.Test_Websanity object at 0x00000222A115D8B0>\n\n    @allure.title(\"User Email\")\n    @allure.testcase(testcasedocument, \"Test Case Document\")\n    @allure.tag(\"sanity\", \"user detail popup\", \"web\", \"user profile\")\n    @allure.link(testcasereport,\n                 link_type=\"hyperlink\", name=\"Test Case Report\")\n    @allure.severity(allure.severity_level.MINOR)\n    @allure.step(\"1. Get the current user email address. \"\n                 \"2. Compare the current user name with the one entered in user detail pop up. \")\n    def test_040(self):\n        \"\"\" To verify the email, in user profile page. \"\"\"\n        # to verify the user email address\n        # now since this was written before, the new mandatory user detail pop up implementation,\n        # the test cases is written in a way that it will give true only when the updated email address\n        # is there and if the old one or any other is there it will give false.\n        # In future there will be case added wherein the user profile will be checked twice,\n        # once before user filling the user detail pop up and one after.\n        if self.driver.find_element(By.XPATH, fe_Sections.useremailsx).text == self.Email:\n            assert True\n        elif self.driver.find_element(By.XPATH, fe_Sections.useremailsx).text == self.user_email:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"SSTC_040UserEmail\",\n                          attachment_type=AttachmentType.PNG)\n            assert False\n        else:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"SSTC_040Email\", attachment_type=AttachmentType.PNG)\n>           assert False\nE           assert False\n\ntestCases\\Web_Basic_Sanity_Pilot.py:1039: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : " To verify the email, in user profile page. ",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert False",
    "statusTrace" : "self = <testCases.Web_Basic_Sanity_Pilot.Test_Websanity object at 0x00000222A115D8B0>\n\n    @allure.title(\"User Email\")\n    @allure.testcase(testcasedocument, \"Test Case Document\")\n    @allure.tag(\"sanity\", \"user detail popup\", \"web\", \"user profile\")\n    @allure.link(testcasereport,\n                 link_type=\"hyperlink\", name=\"Test Case Report\")\n    @allure.severity(allure.severity_level.MINOR)\n    @allure.step(\"1. Get the current user email address. \"\n                 \"2. Compare the current user name with the one entered in user detail pop up. \")\n    def test_040(self):\n        \"\"\" To verify the email, in user profile page. \"\"\"\n        # to verify the user email address\n        # now since this was written before, the new mandatory user detail pop up implementation,\n        # the test cases is written in a way that it will give true only when the updated email address\n        # is there and if the old one or any other is there it will give false.\n        # In future there will be case added wherein the user profile will be checked twice,\n        # once before user filling the user detail pop up and one after.\n        if self.driver.find_element(By.XPATH, fe_Sections.useremailsx).text == self.Email:\n            assert True\n        elif self.driver.find_element(By.XPATH, fe_Sections.useremailsx).text == self.user_email:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"SSTC_040UserEmail\",\n                          attachment_type=AttachmentType.PNG)\n            assert False\n        else:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"SSTC_040Email\", attachment_type=AttachmentType.PNG)\n>           assert False\nE           assert False\n\ntestCases\\Web_Basic_Sanity_Pilot.py:1039: AssertionError",
    "steps" : [ {
      "name" : "1. Get the current user email address. 2. Compare the current user name with the one entered in user detail pop up. ",
      "time" : {
        "start" : 1672227633821,
        "stop" : 1672227634342,
        "duration" : 521
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: assert False\n",
      "statusTrace" : "  File \"c:\\users\\aniket.gupta\\pycharmprojects\\fantasyautomation\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\aniket.gupta\\PycharmProjects\\FantasyAutomation\\testCases\\Web_Basic_Sanity_Pilot.py\", line 1039, in test_040\n    assert False\n",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "f80f14dca50a4b66",
        "name" : "SSTC_040Email",
        "source" : "f80f14dca50a4b66.png",
        "type" : "image/png",
        "size" : 657979
      } ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 1,
      "hasContent" : true,
      "stepsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1,
    "hasContent" : true,
    "stepsCount" : 1
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "user detail popup"
  }, {
    "name" : "severity",
    "value" : "minor"
  }, {
    "name" : "tag",
    "value" : "web"
  }, {
    "name" : "tag",
    "value" : "sanity"
  }, {
    "name" : "tag",
    "value" : "user profile"
  }, {
    "name" : "parentSuite",
    "value" : "testCases"
  }, {
    "name" : "suite",
    "value" : "Web_Basic_Sanity_Pilot"
  }, {
    "name" : "subSuite",
    "value" : "Test_Websanity"
  }, {
    "name" : "host",
    "value" : "Aniket-Gupta"
  }, {
    "name" : "thread",
    "value" : "25572-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testCases.Web_Basic_Sanity_Pilot"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "Test Case Report",
    "url" : "https://moraviait-my.sharepoint.com/:x:/g/personal/anigupta_moravia_com/EfP285he4TZMkmbtv7qCVIUBlZ32Jf-tfggx7CD1JJMKUg?e=S9BFmB",
    "type" : "hyperlink"
  }, {
    "name" : "Test Case Document",
    "url" : "https://moraviait-my.sharepoint.com/:w:/g/personal/anigupta_moravia_com/ETq9D_2FRG9At5IHN1JY9FwBCK3YKC5vry8hhhKEVtJAjA?e=iYk53U",
    "type" : "test_case"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "minor",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 4,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 4
      },
      "items" : [ {
        "uid" : "8c5080902e3bbd01",
        "reportUrl" : "http://example.org/build#13/AllureReport/#testresult/8c5080902e3bbd01",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert False",
        "time" : {
          "start" : 1672063031143,
          "stop" : 1672063031619,
          "duration" : 476
        }
      }, {
        "uid" : "f71438fe033d203f",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert False",
        "time" : {
          "start" : 1672060767725,
          "stop" : 1672060768572,
          "duration" : 847
        }
      }, {
        "uid" : "c17cc9ba11a2ee6a",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert False",
        "time" : {
          "start" : 1671879893199,
          "stop" : 1671879893721,
          "duration" : 522
        }
      } ]
    },
    "tags" : [ "user profile", "web", "sanity", "user detail popup" ]
  },
  "source" : "805bb2ffcc7ad419.json",
  "parameterValues" : [ ]
}